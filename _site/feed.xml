<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwanseaCon 2015</title>
    <description>SwanseaCon is an agile development &amp; software craftsmanship conference</description>
    <link>http://swanseacon.github.io/</link>
    <atom:link href="http://swanseacon.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Adam Tornhill - There&#39;s More to Code than Code</title>
        <description>&lt;h4 id=&quot;theres-more-to-code-than-code&quot;&gt;There’s more to code than code&lt;/h4&gt;

&lt;p&gt;Our software industry is good at exploring new ways to do things. If you’ve been around for a while you’ve probably seen your fair share of trends come and go. These trends are reactions to past failures. We push the pendulum from one extreme to the next. Yesterday’s silver bullet is tomorrow’s legacy code. Right now microservices are all the rage. In a few years we’ll see a counter reaction as we discover that the complexity is still there, only now it’s distributed as well.&lt;/p&gt;

&lt;p&gt;In our rush to improve we often miss the most fundamental component of any successful software design: the people who built it. It’s my firm belief that if we want to truly improve as an industry, we need to understand the interaction between people and code. How our code affects us and how we, as an organization, affect the code we write.&lt;/p&gt;

&lt;p&gt;Until now, this traditionally softer side of, well, software has been left to subjective judgments. Expert judgments, perhaps, but nonetheless at risk for cognitive and social biases. What if we could guide those decisions with objective data instead? What if we could get a social view of our codebase?&lt;/p&gt;

&lt;p&gt;We don’t know what the future may hold. But we’ll be well prepared for it if we can understand where we, and our code, stand today. Let’s explore that direction.&lt;/p&gt;

&lt;h4 id=&quot;a-software-architecture-is-a-social-design&quot;&gt;A software architecture is a social design&lt;/h4&gt;

&lt;p&gt;First of all, it’s impossible to separate technology decisions from people; Any software architecture is as much a social design as it is a technical one. That’s a good thing because it means we, as developers, can optimize for what matters the most.&lt;/p&gt;

&lt;p&gt;But most of the time we aren’t designing new software architectures. We have existing systems that we need to maintain, improve and evolve. This is challenging enough from a technical point of view. So what would it mean if we add a social axis too? Follow along and explore an alternate reality where we get the information we need to make both technical and social decisions.&lt;/p&gt;

&lt;h4 id=&quot;move-beyond-code&quot;&gt;Move beyond code&lt;/h4&gt;

&lt;p&gt;Pretend for a moment that you join a new organization. Like most companies in our industry their codebase is a mixed bag. Some parts look good, you’re even tempted to say “elegant”. Others are more like a scary monster riddled with “temporary” solutions, workarounds and important business logic mixed together with seemingly random chunks of accidental complexity. How do you start to make sense of it? Which parts are the most important? What do you need to understand first? Where are the key components? And, who do you ask when you want to understand why a ‘userId’ field is “re-used” to represent a time-stamp in some interactions but not others?&lt;/p&gt;

&lt;p&gt;Now, let’s pretend for a moment that you are handed a complete map of the system. You notice immediately that it’s not your typical diagram of wild boxes and cylinders connected by bold dashed lines. Instead it looks more like a topography that shows the distribution of complexity in the codebase together with information on the relative importance of each part. You’re told that the map is generated from how the team has actually worked with the codebase, so you know it’s closer to reality than what most documentation is. Sweet - now you know which components you need to grasp first and where the scariest parts are. That drives your learning.&lt;/p&gt;

&lt;p&gt;In addition you get a view of the typical change patterns in the system. You see that each change to the GUI leads to a predictable change to a stored procedure in the database. That’s good to know. It seems like an architectural principle, yes - a questionable one, but important to know about nonetheless. You speculate that this information could be used to highlight technical debt in the codebase; If different sub-systems need to change together, doesn’t that mean there’s a missing abstraction? Why are they so tightly coupled in time? Wow - this information really helps you ask the right questions.&lt;/p&gt;

&lt;p&gt;But why stop there? Let’s say you get a second map as well. If the first map showed the geography of the system, this second map illustrates the knowledge distribution. It’s a map that immediately points you to the developer that knows the most about a certain module or sub-system. You realize that you no longer need to haunt the halls of the corporation, be sent from door to door to track down someone able to answer your question. Instead you just look at your map and know who you should communicate with. You realize that the information isn’t perfect - abstractions of complex systems never are - but it works surprisingly well in practice.&lt;/p&gt;

&lt;h4 id=&quot;explore-the-social-side-of-your-codebase&quot;&gt;Explore the social side of your codebase&lt;/h4&gt;

&lt;p&gt;Once you have all that information you notice that you can do so much more by combining it. Let’s see: you know about the change patterns in your codebase. You also know about the knowledge distribution in the code. Hmmm, that’s both technical and social information there. If we combine them, we should be able to spot organizational problems that we’d normally mistake for technical issues. How cool isn’t that! And if we instead map out the knowledge distribution on a team level and then look for change patterns that cross those team boundaries then, well, we’d finally have a way to measure how well aligned we are with Conway’s Law. That would be powerful stuff. And yet it just feels as a starting point. You know that you can do so much more with this data.&lt;/p&gt;

&lt;h4 id=&quot;turn-the-vision-into-reality&quot;&gt;Turn the vision into reality&lt;/h4&gt;

&lt;p&gt;I hope you enjoyed our thought-experiment. Wouldn’t it be great to have access to those tools and techniques on your own projects? In the real world? On the 8th of September at 11:35 you’ll see how &lt;a href=&quot;http://swancon.co.uk/schedule/#session-17&quot;&gt;Treat Your Code as a Crime Scene&lt;/a&gt; delivers that reality. It’s a new way to view code that will change how you work with legacy systems. Join me on this fascinating ride!&lt;/p&gt;

&lt;h4 id=&quot;did-you-enjoy-this-post&quot;&gt;Did you enjoy this post?&lt;/h4&gt;

&lt;p&gt;Adam has recorded a video explaining a bit about his upcoming talk in this video. &lt;a href=&quot;https://www.youtube.com/watch?v=5t-G29DdON0&quot;&gt;View Adams video here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can listen to more from Adam this September at SwanseaCon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://swancon.co.uk/schedule/#session-17&quot;&gt;Treat your Code as a Crime Scene&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 May 2015 12:18:18 +0100</pubDate>
        <link>http://swanseacon.github.io/blog/adam-tornhill-theres-more-to-code-than-code%20-%20Copy</link>
        <guid isPermaLink="true">http://swanseacon.github.io/blog/adam-tornhill-theres-more-to-code-than-code%20-%20Copy</guid>
      </item>
    
      <item>
        <title>Jiri Knesl - Should we use an existing agile methodology or create our own?</title>
        <description>&lt;h4 id=&quot;should-we-use-an-existing-agile-methodology-or-create-our-own&quot;&gt;Should we use an existing agile methodology or create our own?&lt;/h4&gt;

&lt;p&gt;Picking a programming language, platform, and framework are key things that largely influence your development efforts. And for frameworks you have an important question: do you use an existing one or make your own?&lt;/p&gt;

&lt;p&gt;When you use an existing framework you feel in control of the source code. Is this right? Sure, of course.&lt;/p&gt;

&lt;p&gt;When using an existing framework do you have control? Many answer no but that’s silly. You can make changes to the source code (but face the bitter price of possibly losing the ability to upgrade the framework)&lt;/p&gt;

&lt;p&gt;The next advantage of an existing framework is that it is already used. Those tons of bugs were already found and fixed. Sometimes though this comes at a price - higher complexity or lower performance.&lt;/p&gt;

&lt;p&gt;All those things are valid for management methodologies as well. You can use yours or others. You have control. You can change it. With an existing methodology you don’t have to fix those bugs (yes, methodologies have bugs too).&lt;/p&gt;

&lt;p&gt;The problem is when you pick a bad framework (bad methodology). Or when you develop your framework made to measure of your business and the market, technologies or people change. In this case using the same framework (same methodology) is like having a ball and chain. Your own chain and your own ball. Still you stick to something that doesn’t deserve it.&lt;/p&gt;

&lt;p&gt;It is more difficult to succeed with your framework (your methodology) than you expect. I have studied frameworks for the last 8 years. Still never tried to write one.  I have studied agile methodologies for as many years too. I made methodologies for my clients. I did lots of mistakes. Now I am aware what’s necessary. Still I don’t believe there’s any Holy Grail, best framework, best methodology for all the people and forever. You still have to react.&lt;/p&gt;

&lt;p&gt;But there are best practices:&lt;/p&gt;

&lt;p&gt;To have successful framework you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very good common stuff - a framework is abstraction of a programming approach. You need experience to be able to abstract. In my opinion frameworks can be developed only by people with lots of hands-on experience. If you are a junior developer it’s better to practice writing applications or libraries.&lt;/li&gt;
  &lt;li&gt;Great documentation - a framework’s vital part is great documentation. If you’re not able to write and maintain documentation you lost. Open Source framework is without chance. An in-company framework without documentation will lead to high expenses to teach new colleagues.&lt;/li&gt;
  &lt;li&gt;Have a good programming style - even if you develop software for a very, very, long time you don’t have to be one of those who writes beautiful source code. When you have a bad style nobody will like using and changing your source code. Most developers read code more than write it. Even when you are an ingenious mathematician and developer, still nobody will use it.&lt;/li&gt;
  &lt;li&gt;Have endurance - it’s a marathon to develop a framework. Maybe you don’t realize how difficult it is. All those problems and special cases to catch before you’ll be able to solve the problem. It’ll be months to something useful and stable.&lt;/li&gt;
  &lt;li&gt;To be a great programmer - it takes experience, a good programming style and many other things which will make you a great developer. All people in a company rely on a framework. If you make a security bug in a framework then all framework users have that security bug, think about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a similar story for methodologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You must know what works over time - a framework must survive longer then paradigms in fashion last two months methodology must survive too.&lt;/li&gt;
  &lt;li&gt;You must know how to describe it - all principles you put into the methodology must be described and bond to real situations. All the people in the team must know what to do and how to solve different situations.&lt;/li&gt;
  &lt;li&gt;People have to enjoy the methodology - people have to connect to the values and principles. There should be advocates of the methodology who will fight for it, think about it and improve it to an organization’s need. It’s not simple.&lt;/li&gt;
  &lt;li&gt;The methodology must persist even if it’s changed all the time - in our age we are facing constant change. You must run to stay on one place. But when you change the methodology basic principles should be vital after years and should help the company to prosper.&lt;/li&gt;
  &lt;li&gt;You must know how to make managerial methodologies - it’s the same as programming. It’s not simpler than making any other system. How many years you develop software and improve in SW development? And how many years you make methodologies and improve in understanding of organization of people and work? It is the same but instead of algorithms, data structures, security, testing you have culture, microeconomics, operation management, HR, strategy, R&amp;amp;D and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can be lucky and create a great company with a strong culture, the right people and you won’t have to try to build or use any special methodology. Even all those successful methodologies were created somewhere, right? But I believe it’s improbable.&lt;/p&gt;

&lt;p&gt;If you don’t have those skills use an existing framework (methodology).&lt;/p&gt;

&lt;p&gt;Or find someone who knows how to develop successful frameworks (methodologies).&lt;/p&gt;

&lt;p&gt;Or spend years and learn how to write frameworks (create methodologies) on your own.&lt;/p&gt;

&lt;h4 id=&quot;did-you-enjoy-this-post&quot;&gt;Did you enjoy this post?&lt;/h4&gt;

&lt;p&gt;You can listen to more from Jiri this September at SwanseaCon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://swancon.co.uk/schedule/#session-11&quot;&gt;How to use Theory of Constraints to scale big agile development teams?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 08:00:00 +0100</pubDate>
        <link>http://swanseacon.github.io/blog/jiri-knesl-should-we-use-an-existing-agile-methodology-or-create-our-own%20-%20Copy</link>
        <guid isPermaLink="true">http://swanseacon.github.io/blog/jiri-knesl-should-we-use-an-existing-agile-methodology-or-create-our-own%20-%20Copy</guid>
      </item>
    
      <item>
        <title>Early bird tickets now on sale!</title>
        <description>&lt;p&gt;While we’re still running through speaker submissions and trying to finalise an agenda we’ve decided to give you lucky lot a chance to save £200 off a standard conference ticket!&lt;/p&gt;

&lt;p&gt;If you purchase a ticket before 31st March 2015 you will be able to save £200 and snap up a ticket for just £250. After 31st March 2015 ticket prices will increase, so grab a bargain today.&lt;/p&gt;

&lt;p&gt;More details about speakers, agenda and tickets will appear in subsequent posts. In the meantime like us on &lt;a href=&quot;https://www.facebook.com/swanseacon&quot;&gt;Facebook&lt;/a&gt;, follow on &lt;a href=&quot;https://twitter.com/SwanseaCon&quot;&gt;Twitter&lt;/a&gt;, add to circles in &lt;a href=&quot;https://plus.google.com/u/1/105624973822199981487&quot;&gt;Google+&lt;/a&gt; or subcribe to our &lt;a href=&quot;//swancon.us10.list-manage.com/subscribe/post?u=6f529863589ed3eabebff1faf&amp;amp;id=ac260fb163&quot;&gt;mailing list&lt;/a&gt; in order not to miss any cool stuff about the conference.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Mar 2015 07:00:00 +0000</pubDate>
        <link>http://swanseacon.github.io/blog/early-bird-tickets-now-on-sale%20-%20Copy%20-%20Copy</link>
        <guid isPermaLink="true">http://swanseacon.github.io/blog/early-bird-tickets-now-on-sale%20-%20Copy%20-%20Copy</guid>
      </item>
    
      <item>
        <title>Call for papers is now closed</title>
        <description>&lt;p&gt;We’re very excited - not just because of the inordinate amount of caffeine based products consumed -
but also because we are currently putting together
an agenda for the biggest Agile Development &amp;amp; Software Craftsmanship  related event in Wales - &lt;a href=&quot;http://swancon.co.uk/&quot;&gt;SwanseaCon 2015&lt;/a&gt;. The response for our first call for papers for SwanseaCon 2015 was fantastic, around 70 papers were submitted from speakers from all around the world.&lt;/p&gt;

&lt;p&gt;The two day conference will take place in the costal city of Wales - Swansea. Swansea is Wales’ Waterfront City. It sits on the sandy five mile stretch of Swansea Bay beach and is a great base for exploring the best of South-West Wales - UK. So take your time in Swansea, the heart of Wales, in the company of experts and technical geeks.&lt;/p&gt;

&lt;p&gt;So should you also be excited? Well yes… and here’s why!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Attendance&lt;/strong&gt;: we’re expecting over 200 attendees&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Topic&lt;/strong&gt;: more than 30 hours of agile development &amp;amp; software craftsmanship&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;: 7-8 of September, expect a two day technical conference&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Venue&lt;/strong&gt;: Swansea - we’re in the process of finalising the venue which will be in the heart of the costal city of Swansea&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speakers&lt;/strong&gt;: more than 25 world class speakers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but we’ve already secured a first batch of experts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sandro Mancuso&lt;/strong&gt; - Software Craftsman, author, speaker, founder of the London Software Craftsmanship Community.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Janos Feher&lt;/strong&gt; - Lead Developer at Intern Avenue&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simon Brown&lt;/strong&gt; - Author of “Software Architecture for Developers”, speaker, coder, creator of the c4 software architecture model and @structurizr&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Jason Gorman&lt;/strong&gt; - Programmer &amp;amp; trainer at Codemanship&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sander Hoogendoorn&lt;/strong&gt; - Software Architect, programmer, writer and speaker&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Steve Tooke&lt;/strong&gt; - Independent programmer, trainer and coach.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details about speakers, agenda and tickets will appear in subsequent posts. In the meantime like us on &lt;a href=&quot;https://www.facebook.com/swanseacon&quot;&gt;Facebook&lt;/a&gt;, follow on &lt;a href=&quot;https://twitter.com/SwanseaCon&quot;&gt;Twitter&lt;/a&gt;, add to circles in &lt;a href=&quot;https://plus.google.com/u/1/105624973822199981487&quot;&gt;Google+&lt;/a&gt; or subcribe to our &lt;a href=&quot;//swancon.us10.list-manage.com/subscribe/post?u=6f529863589ed3eabebff1faf&amp;amp;id=ac260fb163&quot;&gt;mailing list&lt;/a&gt; in order not to miss any cool stuff about the conference.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Feb 2015 08:00:00 +0000</pubDate>
        <link>http://swanseacon.github.io/blog/call-for-papers-now-closed%20-%20Copy</link>
        <guid isPermaLink="true">http://swanseacon.github.io/blog/call-for-papers-now-closed%20-%20Copy</guid>
      </item>
    
      <item>
        <title>Call for Papers</title>
        <description>&lt;p&gt;SwanseaCon 2015 will be held 7th-8th of September in the coastal city of Swansea. If you want to be part of this great event as a speaker you knocked at the good door.&lt;/p&gt;

&lt;h4 id=&quot;want-to-speak-at-swanseacon&quot;&gt;Want to speak at SwanseaCon?&lt;/h4&gt;

&lt;p&gt;If you would like to submit a paper, please complete the form below.&lt;/p&gt;

&lt;p&gt;All papers should:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;aim to be a maximum of 45 minutes in length&lt;/li&gt;
  &lt;li&gt;need to be covering the technical side of agile development or software craftsmanship.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;please-submit-your-proposals-here&quot;&gt;Please submit your proposals here.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Deadline&lt;/strong&gt; is February 15, 2015&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; There is no guarantee that a submission will be put onto the conference agenda!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SwanseaCon picks the most interesting talk proposals and will inform the selected submitters shortly after.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;any-questions&quot;&gt;Any questions?&lt;/h4&gt;
&lt;p&gt;Email organizers at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#064;&amp;#115;&amp;#119;&amp;#097;&amp;#110;&amp;#099;&amp;#111;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#046;&amp;#117;&amp;#107;&quot;&gt;&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#064;&amp;#115;&amp;#119;&amp;#097;&amp;#110;&amp;#099;&amp;#111;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#046;&amp;#117;&amp;#107;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Nov 2014 09:00:00 +0000</pubDate>
        <link>http://swanseacon.github.io/blog/call-for-papers</link>
        <guid isPermaLink="true">http://swanseacon.github.io/blog/call-for-papers</guid>
      </item>
    
  </channel>
</rss>
